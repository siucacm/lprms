/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Panel_UserList.java
 *
 * Created on Apr 26, 2010, 8:44:08 AM
 */

package lprms.panel;

import java.awt.Point;
import java.awt.Rectangle;
import java.util.ArrayList;
import javax.swing.JViewport;
import javax.swing.table.DefaultTableModel;
import lprms.LPRMSApp;
import lprms.obj.User;
import lprms.sql.SQL_Library;
import org.jdesktop.application.Task;
import org.jdesktop.application.TaskMonitor;
import org.jdesktop.application.TaskService;

/**
 *
 * @author Sarah
 */
public class Panel_UserList extends Panel {

    /** Creates new form Panel_UserList */
    public Panel_UserList() {
        data = new DefaultTableModel(COLS, 0) {
            @Override public boolean isCellEditable(int rowIndex, int mColIndex) { return false; } };
        
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        dataView = new javax.swing.JTable();
        info = new javax.swing.JLabel();

        setName("Form"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        dataView.setModel(data);
        dataView.setFocusable(false);
        dataView.setName("dataView"); // NOI18N
        dataView.setRequestFocusEnabled(false);
        dataView.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        dataView.setUpdateSelectionOnSort(false);
        dataView.setVerifyInputWhenFocusTarget(false);
        jScrollPane1.setViewportView(dataView);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(lprms.LPRMSApp.class).getContext().getResourceMap(Panel_UserList.class);
        info.setText(resourceMap.getString("info.text")); // NOI18N
        info.setName("info"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(info, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(info))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable dataView;
    private javax.swing.JLabel info;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private javax.swing.table.DefaultTableModel data;

    private class RefreshTask extends Task {
        RefreshTask() {
            super(LPRMSApp.getApplication());
        }
        @SuppressWarnings("unchecked")
        @Override protected Void doInBackground() {
            setMessage("Refreshing Entries");
            data.setRowCount(0);
            data.setDataVector(null, COLS);
            SQL_Library.load_users();
            ArrayList<User> users = SQL_Library.getUsers();
            for (int i = 0; i < users.size(); i++)
            {
                data.addRow(users.get(i).getUserListInfo());
                this.setProgress(i, 0, users.size());
            }
            info.setText("Total Number of Attendees: "+users.size());
            return null;
        }
        @Override protected void finished() {
            setMessage("Done");
        }
    }

    public void refresh()
    {
        RefreshTask task = new RefreshTask();
        TaskService ts = LPRMSApp.getInstance().getContext().getTaskService();
        ts.execute(task);

    }

    public void processInput(String input)
    {
        if (input.length() != 6) return;
        int uid = 0;
        try {
            uid = Integer.parseInt(input);
        } catch (NumberFormatException e) { System.err.println("Invalid ID!"); }
        if (uid != 0)
        {
            int row = lprms.sql.SQL_Library.findUser(uid);
            if (row != -1) 
            {
                dataView.setRowSelectionInterval(row, row);
                scrollToVisible(row);
            }
        }
    }

    public void scrollToVisible(int rowIndex) {
        if (!(dataView.getParent() instanceof JViewport)) {
            return;
        }
        JViewport viewport = (JViewport)dataView.getParent();

        // This rectangle is relative to the table where the
        // northwest corner of cell (0,0) is always (0,0).
        Rectangle rect = dataView.getCellRect(rowIndex, 0, true);

        // The location of the viewport relative to the table
        Point pt = viewport.getViewPosition();

        // Translate the cell location so that it is relative
        // to the view, assuming the northwest corner of the
        // view is (0,0)
        rect.setLocation(rect.x-pt.x, rect.y-pt.y);

        // Scroll the area into view
        viewport.scrollRectToVisible(rect);
    }

    public static final String[] COLS = {"ID","Username","First Name","Last Name","Designation","Seat"};
}
